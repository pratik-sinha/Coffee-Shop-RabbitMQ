 services:
  nginx:
    image: nginx:latest
    volumes:
      - ./pkg/nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "9000:80"
    depends_on:
      - web
    networks:
      - web_api


  mongodb:
    container_name: mongo
    image: mongo:6.0.13
    environment:
      - MONGO_INITDB_ROOT_USERNAME=user
      - MONGO_INITDB_ROOT_PASSWORD=pass
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017 --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    ports:
      - "27017:27017"
    networks:
      - web_api
    # volumes:
    #   - type: bind
    #     source: ./data
    #     target: /data/db

  redis:
    container_name: redis
    image: redis:7.2-alpine
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
    ports:
      - "6379:6379"
    networks:
      - web_api

  rabbitmq:
    container_name: rabbitmq
    hostname: myrabbit
    image: rabbitmq:3.12.6-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      start_period: 5s
      start_interval: 5s
      timeout: 30s
      retries: 3
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - web_api

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268"
      - "14250:14250"
    networks:
      - web_api

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./pkg/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - web_api
    
  otel_collector:
    container_name: otel_collector
    image: otel/opentelemetry-collector-contrib
    volumes:
      - ./pkg/monitoring/collector-gateway.yaml:/etc/collector-gateway.yaml
    command: ["--config=/etc/collector-gateway.yaml"]
    ports:
      - "1888:1888"   # pprof extension
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "55670:55679" # zpages extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - METRICS_STORAGE_TYPE=prometheus
    networks:
      - web_api
    depends_on:
      - jaeger
    
  product_service:
    container_name: product_service
    build: 
      context: ./
      dockerfile: ./internal/product/docker/Dockerfile
    ports:
      - "8000:8000"
      - "8001:8001"
    environment:
      - config=docker
    networks:
      - web_api
    depends_on:
      - otel_collector   
      - mongodb
      - redis 

  user_service:
    container_name: user_service
    build: 
      context: ./
      dockerfile: ./internal/user/docker/Dockerfile
    ports:
      - "5000:5000"
    environment:
      - config=docker
    # volumes:
    #   - ./:/app
    networks:
      - web_api
    depends_on:
      - otel_collector
      - mongodb
      - redis

  counter_service:
    container_name: counter_service
    build: 
      context: ./
      dockerfile: ./internal/counter/docker/Dockerfile
    ports:
      - "5001:5001"
    environment:
      - config=docker
    networks:
      - web_api
    depends_on:
      rabbitmq:
       condition: service_healthy
      mongodb:
       condition: service_healthy
      redis:
       condition: service_healthy



  kitchen_service:
    container_name: kitchen_service
    build: 
      context: ./
      dockerfile: ./internal/kitchen/docker/Dockerfile
    environment:
      - config=docker
    networks:
      - web_api
    depends_on:
      rabbitmq:
       condition: service_healthy
      mongodb:
       condition: service_healthy
      redis:
       condition: service_healthy
 
  barista_service:
    container_name: barista_service
    build: 
      context: ./
      dockerfile: ./internal/barista/docker/Dockerfile
    environment:
      - config=docker
    networks:
      - web_api
    depends_on:
      rabbitmq:
       condition: service_healthy
      mongodb:
       condition: service_healthy
      redis:
       condition: service_healthy

  web:
    build:
      context: ./
      dockerfile: ./internal/web/docker/Dockerfile
    image: coffeeshop-web
    environment:
      REVERSE_PROXY_URL: http://localhost:5000
      WEB_PORT: 8888
    ports:
      - 8999:8999
    depends_on:
      - user_service
      - counter_service
    networks:
      - web_api

    

 networks:
   web_api:
     driver: bridge
    
  
